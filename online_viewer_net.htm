<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Dark Chat Interface</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background-color: #121212;
      color: #fff;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    .chat-container {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
      background-color: #181818;
    }
    .input-container {
      display: flex;
      padding: 10px;
      background-color: #1f1f1f;
      border-top: 1px solid #333;
    }
    .input-container textarea {
      flex: 1;
      padding: 10px;
      border: none;
      border-radius: 5px;
      margin-right: 10px;
      background-color: #333;
      color: white;
    }
    .input-container button {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      background-color: #6200ea;
      color: white;
      cursor: pointer;
    }
    .message {
      display: flex;
      margin-bottom: 10px;
    }
    .profile-pic {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      margin-right: 10px;
    }
    .bubble {
      background-color: #333;
      padding: 10px;
      border-radius: 10px;
      max-width: 70%;
      position: relative;
      word-wrap: break-word; /* Break long words */
      white-space: pre-wrap;  /* Automatically wrap lines */
    }
    .bubble.unread {
      border: 1px solid #03dac6;
    }
    .sender-name {
      font-weight: bold;
      margin-bottom: 5px;
    }
    .timestamp {
      font-size: 0.75em;
      color: #bbb;
      text-align: right;
      margin-top: 5px;
    }
    .date-separator {
      text-align: center;
      margin: 10px 0;
      font-weight: bold;
      color: #bbb;
    }
  </style>
</head>
<body>

  <div class="chat-container" id="chat"></div>

  <div class="input-container">
    <textarea type="text" id="messageInput" placeholder="Type your message..."></textarea>
    <button id="sendButton">Send</button>
  </div>

  <!-- Marked.js CDN -->
  <script type="module">
    import { marked } from "https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js";

    const nocodbURL = 'https://app.nocodb.com/api/v2/tables/m6pjpqc5i5znvjt/records';
    const token = '-0Czyt0G8ZMbZC_peal62M7xR1kHzCyXKq35mKn8';

    async function fetchChats() {
      const response = await fetch(nocodbURL, {
        headers: {
          'accept': 'application/json',
          'xc-token': token
        }
      });
      const data = await response.json();
      return data.list || [];
    }

    function formatDate(dateStr) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return new Date(dateStr).toLocaleDateString(undefined, options);
    }

    function formatTime(dateStr) {
      const options = { hour: '2-digit', minute: '2-digit' };
      return new Date(dateStr).toLocaleTimeString(undefined, options);
    }

    function groupByDate(messages) {
      return messages.reduce((acc, message) => {
        const date = formatDate(message.created_at || message.updated_at || new Date());
        if (!acc[date]) acc[date] = [];
        acc[date].push(message);
        return acc;
      }, {});
    }

    function renderChats(groupedMessages) {
      const chatContainer = document.getElementById('chat');
      chatContainer.innerHTML = '';

      Object.keys(groupedMessages).forEach(date => {
        const dateDiv = document.createElement('div');
        dateDiv.className = 'date-separator';
        dateDiv.textContent = date;
        chatContainer.appendChild(dateDiv);

        groupedMessages[date].forEach(msg => {
          addMessageToDOM(msg);
        });
      });

      scrollToBottom();
    }

    function addMessageToDOM(msg) {
      const chatContainer = document.getElementById('chat');

      const messageDiv = document.createElement('div');
      messageDiv.className = 'message';

      const img = document.createElement('img');
      img.className = 'profile-pic';
      img.src = msg.profile_pic || 'https://lh3.googleusercontent.com/a/ACg8ocI-0YiWJ8-YTHcJFBggJHUX5te0knBBG-qyIaFyTRDU0GS-qE4=s432-c-no';
      messageDiv.appendChild(img);

      const bubble = document.createElement('div');
      bubble.className = 'bubble';
      if (!msg.is_read) bubble.classList.add('unread');

      const sender = document.createElement('div');
      sender.className = 'sender-name';
      sender.textContent = msg.sender_name || 'Unknown';
      bubble.appendChild(sender);

      const content = document.createElement('div');
      content.innerHTML = marked.parse(msg.message || 'No content'); // Markdown rendering
      bubble.appendChild(content);

      const time = document.createElement('div');
      time.className = 'timestamp';
      time.textContent = formatTime(msg.created_at || msg.updated_at || new Date());
      bubble.appendChild(time);

      messageDiv.appendChild(bubble);
      chatContainer.appendChild(messageDiv);
    }

    function scrollToBottom() {
      const chatContainer = document.getElementById('chat');
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    async function sendMessage() {
      const input = document.getElementById("messageInput");
      const text = input.value.trim();
      if (!text) return; // Do nothing if empty

      const payload = {
        message: text,
        sender_name: "Vaishal", // you can make dynamic too!
        profile_pic: "",
        is_read: false
      };

      try {
        const response = await fetch('https://app.nocodb.com/api/v2/tables/m6pjpqc5i5znvjt/records', {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "xc-token": "-0Czyt0G8ZMbZC_peal62M7xR1kHzCyXKq35mKn8"
          },
          body: JSON.stringify(payload)
        });

        if (response.ok) {
          console.log('Message sent!');
          input.value = ""; // Clear input box
          loadChats();   // Reload chat after sending
        } else {
          console.error("Failed to send message", await response.text());
        }
      } catch (error) {
        console.error("Error sending message:", error);
      }
    }

    async function loadChats() {
      const messages = await fetchChats();
      const grouped = groupByDate(messages);
      renderChats(grouped);
    }

    document.getElementById('sendButton').addEventListener('click', sendMessage);
    document.getElementById('messageInput').addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });

    loadChats();

    // OPTIONAL: Auto refresh chat every 10 seconds
    setInterval(loadChats, 10000);
  </script>
</body>
</html>
